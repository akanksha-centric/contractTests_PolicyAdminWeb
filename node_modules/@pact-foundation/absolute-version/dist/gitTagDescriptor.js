"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gitTagDescriptor = exports.getBranchString = void 0;
var git_describe_1 = require("git-describe");
var git_rev_sync_1 = require("git-rev-sync");
var hostname_1 = require("./hostname");
var branchInCI = function (s) {
    // If the branch came out as a detached head, we're in CI, so let's try to figure out the branch name
    return s.startsWith('Detached')
        ? // Appveyor
            process.env.APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH ||
                process.env.APPVEYOR_REPO_BRANCH || // Appveyor defines this as the target branch in a PR, so the PR branch needs to be checked first
                // GitLab
                process.env.CI_COMMIT_BRANCH || // Gitlab does not define this in PRs, so the PR branch name is next
                process.env.CI_MERGE_REQUEST_SOURCE_BRANCH_NAME ||
                process.env.CI_EXTERNAL_PULL_REQUEST_SOURCE_BRANCH_NAME ||
                process.env.CI_COMMIT_REF_NAME || // This might be the tag name, but we shouldn't be looking at this if we're on a specfic tag
                // CircleCI
                process.env.CIRCLE_BRANCH ||
                // Travis
                process.env.TRAVIS_PULL_REQUEST_BRANCH ||
                process.env.TRAVIS_BRANCH || // Travis defines this as the target branch in a PR, so the PR branch needs to be checked first
                s
        : s;
};
var getBranchString = function (clean) {
    return clean(branchInCI(git_rev_sync_1.branch(process.cwd())));
};
exports.getBranchString = getBranchString;
var dirtyString = function (gitInfo, clean) {
    return gitInfo.dirty ? ".SNAPSHOT." + clean(hostname_1.getHostnameString()) : '';
};
var gitHash = function (gitInfo) { return gitInfo.hash.substring(1); };
var tagOrHash = function (gitInfo) {
    return gitInfo.tag ? gitInfo.tag : gitHash(gitInfo);
};
var distance = function (gitInfo) {
    return gitInfo.distance === 0 || gitInfo.distance ? gitInfo.distance + "." : '';
};
var gitTagDescriptor = function (clean, config) {
    var gitInfo = git_describe_1.gitDescribeSync({ match: config.tagGlob });
    var branch = exports.getBranchString(clean);
    return {
        versionSuffix: function () {
            return gitInfo.distance !== 0 || gitInfo.dirty
                ? branch + "+" + distance(gitInfo) + gitHash(gitInfo) + dirtyString(gitInfo, clean)
                : '';
        },
        versionMain: function () {
            return gitInfo.semver ? gitInfo.semver.version : tagOrHash(gitInfo);
        },
    };
};
exports.gitTagDescriptor = gitTagDescriptor;
//# sourceMappingURL=gitTagDescriptor.js.map